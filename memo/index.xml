<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Memoes | k-kitai.github.io</title><link>https://k-kitai.github.io/memo/</link><atom:link href="https://k-kitai.github.io/memo/index.xml" rel="self" type="application/rss+xml"/><description>Memoes</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Fri, 26 Apr 2024 18:33:00 +0900</lastBuildDate><image><url>https://k-kitai.github.io/media/icon_hu10226378635250344412.png</url><title>Memoes</title><link>https://k-kitai.github.io/memo/</link></image><item><title>スワップ領域としてファイルを指定する</title><link>https://k-kitai.github.io/memo/config_swap/</link><pubDate>Fri, 26 Apr 2024 18:33:00 +0900</pubDate><guid>https://k-kitai.github.io/memo/config_swap/</guid><description>&lt;p>RAMの小さいマシンだと容量が足りなくなってフリーズしがちなので、ストレージ上にスワップ領域を確保することにした。
あらかじめパーティションの一部をスワップ領域用に切り分けておくのが一般的と思われるが、システムボリュームのパーティションはいじりたくないので、ここでは簡易的にスワップファイルを作成して使用することにする。&lt;/p>
&lt;h2 id="スワップファイルの作成と設定">スワップファイルの作成と設定&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> &lt;span class="nv">SIZE&lt;/span>&lt;span class="o">=&lt;/span>1G
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo fallocate -l &lt;span class="nv">$SIZE&lt;/span> /swapfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo chmod &lt;span class="m">600&lt;/span> /swapfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo mkswap /swapfile
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo swapon /swapfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="永続化">永続化&lt;/h2>
&lt;p>&lt;code>/etc/fstab&lt;/code>に以下の行を追記。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/swapfile none swap sw 0 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ファイル&lt;code>/swapfile&lt;/code>をどこにもマウントポイントを置かないで、swap形式のイメージファイルとして、swオプションで利用することを表している。&lt;/p>
&lt;p>このまま再起動するとファイルの内容に間違いがあった時に正しく起動できず復旧作業が必要になってしまうので、&lt;code>mount&lt;/code>コマンドで設定が反映できることを確認しておく。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> sudo mount -a &lt;span class="c1"># fstabの内容を反映&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="確認">確認&lt;/h2>
&lt;p>スワップ領域の利用状況は&lt;code>free&lt;/code>コマンドで確認できる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="gp">$&lt;/span> free -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> total used free shared buff/cache available
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Mem: 971Mi 706Mi 98Mi 47Mi 417Mi 265Mi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Swap: 1.0Gi 262Mi 761Mi
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文献">参考文献:&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.baeldung.com/linux/increase-swap-space" target="_blank" rel="noopener">How to Increase Swap Space in Linux - Baeldung&lt;/a> (2024/04/26 最終アクセス)&lt;/li>
&lt;li>man page of fstab(5)&lt;/li>
&lt;/ul></description></item><item><title>OmegaConfとHydraとPyTorch Lightningに関するメモ</title><link>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</link><pubDate>Mon, 15 Apr 2024 10:45:56 +0900</pubDate><guid>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</guid><description>&lt;p>既存の深層学習モデルのPyTorch実装を使おうとしたら、他にもいろいろなライブラリが使われていたのでざっくり整理する。&lt;/p>
&lt;h1 id="pytorch-lightningとは">PyTorch Lightningとは&lt;/h1>
&lt;p>&lt;a href="https://lightning.ai/pytorch-lightning" target="_blank" rel="noopener">PyTorch Lightning&lt;/a>はPyTorchをラップして簡単に使えるようにしてくれるPythonライブラリ。開発は&lt;a href="https://lightning.ai" target="_blank" rel="noopener">Lightning AI&lt;/a>。&lt;/p>
&lt;p>例えばPyTorchの&lt;a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html" target="_blank" rel="noopener">&lt;code>nn.Module&lt;/code>&lt;/a>クラスを継承して実装したネットワークを&lt;a href="https://lightning.ai/docs/pytorch/stable/common/lightning_module.html" target="_blank" rel="noopener">&lt;code>LightningModule&lt;/code>&lt;/a>クラスでくるみ、&lt;code>**.fit(train_x, train_y)&lt;/code>くらいの直感的なメソッドで学習できるようになる。&lt;/p>
&lt;h1 id="hydraとは">Hydraとは&lt;/h1>
&lt;p>&lt;a href="https://hydra.cc/" target="_blank" rel="noopener">Hydra&lt;/a>は機械学習の定型的な処理に特化したスクリプトの記述を助けるPythonライブラリ。開発はMeta (旧 Facebook)。ディレクトリに階層的に保存されたYAML/TOML等のテキストファイルや環境変数、コマンド引数などを参照してすべてのオプションを解決・統合した上で、(この部分はほとんどOmegaConfの機能)、ひとつのPythonオブジェクトとしてエントリポイントの関数(&lt;code>@hydra.main&lt;/code>デコレータをつけて指定)に渡してくれる。また、特定の形式で書かれたPythonオブジェクトを読み込んでクラスのインスタンス化もしてくれる&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;h1 id="omegaconfとは">OmegaConfとは&lt;/h1>
&lt;p>&lt;a href="https://github.com/omry/omegaconf" target="_blank" rel="noopener">OmegaConf&lt;/a>はプログラムの実行に要するオプションの設定内容をYAML/TOML等のテキストファイルや環境変数などを参照して解決し、ひとつのオブジェクトにまとめてくれるPythonライブラリ。開発はOmry Yadan氏(Hydraの開発者でもある)。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://hydra.cc/docs/advanced/instantiate_objects/overview/" target="_blank" rel="noopener">Instantiating objects with Hydra&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memoes | k-kitai.github.io</title>
    <link>https://k-kitai.github.io/memo/</link>
      <atom:link href="https://k-kitai.github.io/memo/index.xml" rel="self" type="application/rss+xml" />
    <description>Memoes</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Fri, 26 Apr 2024 18:33:00 +0900</lastBuildDate>
    <image>
      <url>https://k-kitai.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Memoes</title>
      <link>https://k-kitai.github.io/memo/</link>
    </image>
    
    <item>
      <title>スワップ領域としてファイルを指定する</title>
      <link>https://k-kitai.github.io/memo/config_swap/</link>
      <pubDate>Fri, 26 Apr 2024 18:33:00 +0900</pubDate>
      <guid>https://k-kitai.github.io/memo/config_swap/</guid>
      <description>&lt;p&gt;RAMの小さいマシンだと容量が足りなくなってフリーズしがちなので、ストレージ上にスワップ領域を確保することにした。
あらかじめパーティションの一部をスワップ領域用に切り分けておくのが一般的と思われるが、システムボリュームのパーティションはいじりたくないので、ここでは簡易的にスワップファイルを作成して使用することにする。&lt;/p&gt;
&lt;h2 id=&#34;スワップファイルの作成と設定&#34;&gt;スワップファイルの作成と設定&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SIZE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1G
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; sudo fallocate -l &lt;span class=&#34;nv&#34;&gt;$SIZE&lt;/span&gt; /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; sudo chmod &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; sudo mkswap /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; sudo swapon /swapfile
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;永続化&#34;&gt;永続化&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt;に以下の行を追記。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/swapfile none swap sw 0 0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ファイル&lt;code&gt;/swapfile&lt;/code&gt;をどこにもマウントポイントを置かないで、swap形式のイメージファイルとして、swオプションで利用することを表している。&lt;/p&gt;
&lt;p&gt;このまま再起動するとファイルの内容に間違いがあった時に正しく起動できず復旧作業が必要になってしまうので、&lt;code&gt;mount&lt;/code&gt;コマンドで設定が反映できることを確認しておく。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; sudo mount -a &lt;span class=&#34;c1&#34;&gt;# fstabの内容を反映&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;確認&#34;&gt;確認&lt;/h2&gt;
&lt;p&gt;スワップ領域の利用状況は&lt;code&gt;free&lt;/code&gt;コマンドで確認できる。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; free -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;               total        used        free      shared  buff/cache   available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Mem:           971Mi       706Mi        98Mi        47Mi       417Mi       265Mi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;Swap:          1.0Gi       262Mi       761Mi
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;参考文献&#34;&gt;参考文献:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.baeldung.com/linux/increase-swap-space&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Increase Swap Space in Linux - Baeldung&lt;/a&gt; (2024/04/26 最終アクセス)&lt;/li&gt;
&lt;li&gt;man page of fstab(5)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>OmegaConfとHydraとPyTorch Lightningに関するメモ</title>
      <link>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</link>
      <pubDate>Mon, 15 Apr 2024 10:45:56 +0900</pubDate>
      <guid>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</guid>
      <description>&lt;p&gt;既存の深層学習モデルのPyTorch実装を使おうとしたら、他にもいろいろなライブラリが使われていたのでざっくり整理する。&lt;/p&gt;
&lt;h1 id=&#34;pytorch-lightningとは&#34;&gt;PyTorch Lightningとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://lightning.ai/pytorch-lightning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyTorch Lightning&lt;/a&gt;はPyTorchをラップして簡単に使えるようにしてくれるPythonライブラリ。開発は&lt;a href=&#34;https://lightning.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lightning AI&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例えばPyTorchの&lt;a href=&#34;https://pytorch.org/docs/stable/generated/torch.nn.Module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;nn.Module&lt;/code&gt;&lt;/a&gt;クラスを継承して実装したネットワークを&lt;a href=&#34;https://lightning.ai/docs/pytorch/stable/common/lightning_module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;LightningModule&lt;/code&gt;&lt;/a&gt;クラスでくるみ、&lt;code&gt;**.fit(train_x, train_y)&lt;/code&gt;くらいの直感的なメソッドで学習できるようになる。&lt;/p&gt;
&lt;h1 id=&#34;hydraとは&#34;&gt;Hydraとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hydra&lt;/a&gt;は機械学習の定型的な処理に特化したスクリプトの記述を助けるPythonライブラリ。開発はMeta (旧 Facebook)。ディレクトリに階層的に保存されたYAML/TOML等のテキストファイルや環境変数、コマンド引数などを参照してすべてのオプションを解決・統合した上で、(この部分はほとんどOmegaConfの機能)、ひとつのPythonオブジェクトとしてエントリポイントの関数(&lt;code&gt;@hydra.main&lt;/code&gt;デコレータをつけて指定)に渡してくれる。また、特定の形式で書かれたPythonオブジェクトを読み込んでクラスのインスタンス化もしてくれる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h1 id=&#34;omegaconfとは&#34;&gt;OmegaConfとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/omry/omegaconf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OmegaConf&lt;/a&gt;はプログラムの実行に要するオプションの設定内容をYAML/TOML等のテキストファイルや環境変数などを参照して解決し、ひとつのオブジェクトにまとめてくれるPythonライブラリ。開発はOmry Yadan氏(Hydraの開発者でもある)。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/docs/advanced/instantiate_objects/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating objects with Hydra&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>k-kitai.github.io</title>
    <link>https://k-kitai.github.io/</link>
      <atom:link href="https://k-kitai.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>k-kitai.github.io</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Mon, 24 Oct 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://k-kitai.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>k-kitai.github.io</title>
      <link>https://k-kitai.github.io/</link>
    </image>
    
    <item>
      <title>OmegaConfとHydraとPyTorch Lightningについてメモ</title>
      <link>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</link>
      <pubDate>Mon, 15 Apr 2024 10:45:56 +0900</pubDate>
      <guid>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</guid>
      <description>&lt;p&gt;既存の深層学習モデルのPyTorch実装を使おうとしたら、他にもいろいろなライブラリが使われていたのでざっくり整理する。&lt;/p&gt;
&lt;h1 id=&#34;pytorch-lightningとは&#34;&gt;PyTorch Lightningとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://lightning.ai/pytorch-lightning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyTorch Lightning&lt;/a&gt;はPyTorchをラップして簡単に使えるようにしてくれるPythonライブラリ。開発は&lt;a href=&#34;https://lightning.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lightning AI&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例えばPyTorchの&lt;a href=&#34;https://pytorch.org/docs/stable/generated/torch.nn.Module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;nn.Module&lt;/code&gt;&lt;/a&gt;クラスを継承して実装したネットワークを&lt;a href=&#34;https://lightning.ai/docs/pytorch/stable/common/lightning_module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;LightningModule&lt;/code&gt;&lt;/a&gt;クラスでくるみ、&lt;code&gt;**.fit(train_x, train_y)&lt;/code&gt;くらいの直感的なメソッドで学習できるようになる。&lt;/p&gt;
&lt;h1 id=&#34;hydraとは&#34;&gt;Hydraとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hydra&lt;/a&gt;は機械学習の定型的な処理に特化したスクリプトの記述を助けるPythonライブラリ。開発はMeta (旧 Facebook)。ディレクトリに階層的に保存されたYAML/TOML等のテキストファイルや環境変数、コマンド引数などを参照してすべてのオプションを解決・統合した上で、(この部分はほとんどOmegaConfの機能)、ひとつのPythonオブジェクトとしてエントリポイントの関数(&lt;code&gt;@hydra.main&lt;/code&gt;デコレータをつけて指定)に渡してくれる。また、特定の形式で書かれたPythonオブジェクトを読み込んでクラスのインスタンス化もしてくれる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h1 id=&#34;omegaconfとは&#34;&gt;OmegaConfとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/omry/omegaconf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OmegaConf&lt;/a&gt;はスクリプトに必要な設定を階層的に保存されたYAML/TOML等のテキストファイルや環境変数などを参照して解決し、ひとつのオブジェクトにまとめてくれるPythonライブラリ。開発はOmry Yadan氏(Hydraの開発者でもある)。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/docs/advanced/instantiate_objects/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating objects with Hydra&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MinimalDayPlanner</title>
      <link>https://k-kitai.github.io/project/minimaldayplanner/</link>
      <pubDate>Tue, 19 Mar 2024 21:49:46 +0900</pubDate>
      <guid>https://k-kitai.github.io/project/minimaldayplanner/</guid>
      <description>&lt;p&gt;一日の行動計画と行動記録を同じ画面で行うためのAndroidアプリ「MinimalDayPlanner」を開発しました。&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img alt=&#34;アプリのスクリーンショット&#34; srcset=&#34;
               /project/minimaldayplanner/screenshot_s_hu91d9e71a7da00b1bcb5dc5454de12545_54692_21026cab9f1064b6c959803f11c5e3c3.webp 400w,
               /project/minimaldayplanner/screenshot_s_hu91d9e71a7da00b1bcb5dc5454de12545_54692_590439a6dffb53dbb788b1e975bb35dd.webp 760w,
               /project/minimaldayplanner/screenshot_s_hu91d9e71a7da00b1bcb5dc5454de12545_54692_1200x1200_fit_q75_h2_lanczos_3.webp 1200w&#34;
               src=&#34;https://k-kitai.github.io/project/minimaldayplanner/screenshot_s_hu91d9e71a7da00b1bcb5dc5454de12545_54692_21026cab9f1064b6c959803f11c5e3c3.webp&#34;
               width=&#34;272&#34;
               height=&#34;600&#34;
               loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;開発理由&#34;&gt;開発理由&lt;/h2&gt;
&lt;p&gt;一日の間にこなしたい（こなせる）仕事とその時間配分を精度良く考えるためには、計画通りにいかなかった際の差分を見てフィードバックを取ることが必要だと思ったのですが、
予定表と行動記録の両機能を持ったアプリがあまりなく、手帳に書くのもカレンダーアプリを使う(予定と行動記録を別々のカレンダーに記録する)のも面倒でした。
結局テキスト編集アプリでそれを行っていたのですが、入力の切り替えや表っぽく見えるようにする整形が若干手間だったので必要な操作を括りだして簡素なUIで実現してみました。&lt;/p&gt;
&lt;h2 id=&#34;アピールポイント&#34;&gt;アピールポイント&lt;/h2&gt;
&lt;p&gt;アプリは1画面のみで入門書レベルの拙作なうえに、行動の予定時間・記録時間を数字8桁で入力させてそのまま表示しています。
いろいろと手抜きですが、編集時のポップアップや画面遷移、見た目の修飾がないということは認知的な負荷が少ないという利点でもあります。
（日付だけはDatePickerのポップアップからの入力です。）
クリップボードへの出力ができるので、一日の終わりに別のメモアプリ等に貼り付けて後で見返すとよいと思います。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;書式について&lt;/p&gt;
&lt;p&gt;8桁の数字でどうやって時間を記録するのかを以下の例で説明します。
テキストで表示していますがアプリの使い勝手や見た目はこれとほとんと同じです。
12時00分から13時00分の間(これを&amp;quot;12001300&amp;quot;と表記)にお昼ご飯を食べる予定で、実際もその間で済んだ場合の記述が1行目です。
「13時から15時まで宿題をするつもりだったが、実際には13時から14時30分までお昼寝をした。」というときの記述が2行目と3行目です。
予定を実行しなかった、あるいは予定外の事柄を実行したときは、反対側の時刻の部分を&lt;code&gt;--------&lt;/code&gt;で埋めることにしています。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;12001300_12001300 お昼ご飯
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;13001500_-------- 宿題
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;cl&#34;&gt;--------_13001430 お昼寝
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;とはいえ厳密なチェックをしているわけでは無いので、存在しない時刻や意味をなさない文字列を入力することもできてしまいます。
項目の順序も自明ではないのでユーザーが任意に並び替えられるようにしています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;おことわり&#34;&gt;おことわり&lt;/h2&gt;
&lt;p&gt;個人用途で開発しある程度満足しているのと、先に述べた操作時の「認知的な負荷」を上げないためにも機能拡張は考えていません。
気が向いたときにUIを整え、バグがあった場合は修正します。&lt;/p&gt;
&lt;p&gt;開発者は、本アプリを利用したことによるいかなる損害に関してもその責任を負いかねます。&lt;/p&gt;
&lt;h2 id=&#34;プライバシーポリシー&#34;&gt;プライバシーポリシー&lt;/h2&gt;
&lt;p&gt;MinimalDayPlanner は完全にオフラインで動作し、ユーザーに関する情報を収集することはありません。
ユーザーが入力したテキストはデバイス内に保存され、アプリの外部に送信されることはありません。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Expanding the horizon of automated metamaterials discovery via quantum annealing</title>
      <link>https://k-kitai.github.io/publication/2019_expanding/</link>
      <pubDate>Mon, 15 Jul 2019 22:08:48 +0900</pubDate>
      <guid>https://k-kitai.github.io/publication/2019_expanding/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

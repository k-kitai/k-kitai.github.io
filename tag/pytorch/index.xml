<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pytorch | k-kitai.github.io</title>
    <link>https://k-kitai.github.io/tag/pytorch/</link>
      <atom:link href="https://k-kitai.github.io/tag/pytorch/index.xml" rel="self" type="application/rss+xml" />
    <description>Pytorch</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Mon, 15 Apr 2024 10:45:56 +0900</lastBuildDate>
    <image>
      <url>https://k-kitai.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Pytorch</title>
      <link>https://k-kitai.github.io/tag/pytorch/</link>
    </image>
    
    <item>
      <title>OmegaConfとHydraとPyTorch Lightningについてメモ</title>
      <link>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</link>
      <pubDate>Mon, 15 Apr 2024 10:45:56 +0900</pubDate>
      <guid>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</guid>
      <description>&lt;p&gt;既存の深層学習モデルのPyTorch実装を使おうとしたら、他にもいろいろなライブラリが使われていたのでざっくり整理する。&lt;/p&gt;
&lt;h1 id=&#34;pytorch-lightningとは&#34;&gt;PyTorch Lightningとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://lightning.ai/pytorch-lightning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyTorch Lightning&lt;/a&gt;はPyTorchをラップして簡単に使えるようにしてくれるPythonライブラリ。開発は&lt;a href=&#34;https://lightning.ai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lightning AI&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例えばPyTorchの&lt;a href=&#34;https://pytorch.org/docs/stable/generated/torch.nn.Module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;nn.Module&lt;/code&gt;&lt;/a&gt;クラスを継承して実装したネットワークを&lt;a href=&#34;https://lightning.ai/docs/pytorch/stable/common/lightning_module.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;LightningModule&lt;/code&gt;&lt;/a&gt;クラスでくるみ、&lt;code&gt;**.fit(train_x, train_y)&lt;/code&gt;くらいの直感的なメソッドで学習できるようになる。&lt;/p&gt;
&lt;h1 id=&#34;hydraとは&#34;&gt;Hydraとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hydra&lt;/a&gt;は機械学習の定型的な処理に特化したスクリプトの記述を助けるPythonライブラリ。開発はMeta (旧 Facebook)。ディレクトリに階層的に保存されたYAML/TOML等のテキストファイルや環境変数、コマンド引数などを参照してすべてのオプションを解決・統合した上で、(この部分はほとんどOmegaConfの機能)、ひとつのPythonオブジェクトとしてエントリポイントの関数(&lt;code&gt;@hydra.main&lt;/code&gt;デコレータをつけて指定)に渡してくれる。また、特定の形式で書かれたPythonオブジェクトを読み込んでクラスのインスタンス化もしてくれる&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h1 id=&#34;omegaconfとは&#34;&gt;OmegaConfとは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/omry/omegaconf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OmegaConf&lt;/a&gt;はスクリプトに必要な設定を階層的に保存されたYAML/TOML等のテキストファイルや環境変数などを参照して解決し、ひとつのオブジェクトにまとめてくれるPythonライブラリ。開発はOmry Yadan氏(Hydraの開発者でもある)。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://hydra.cc/docs/advanced/instantiate_objects/overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating objects with Hydra&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>

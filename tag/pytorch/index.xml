<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pytorch | k-kitai.github.io</title><link>https://k-kitai.github.io/tag/pytorch/</link><atom:link href="https://k-kitai.github.io/tag/pytorch/index.xml" rel="self" type="application/rss+xml"/><description>Pytorch</description><generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>ja-jp</language><lastBuildDate>Mon, 15 Apr 2024 10:45:56 +0900</lastBuildDate><image><url>https://k-kitai.github.io/media/icon_hu10226378635250344412.png</url><title>Pytorch</title><link>https://k-kitai.github.io/tag/pytorch/</link></image><item><title>OmegaConfとHydraとPyTorch Lightningに関するメモ</title><link>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</link><pubDate>Mon, 15 Apr 2024 10:45:56 +0900</pubDate><guid>https://k-kitai.github.io/memo/omegaconf_hydra_lightning/</guid><description>&lt;p>既存の深層学習モデルのPyTorch実装を使おうとしたら、他にもいろいろなライブラリが使われていたのでざっくり整理する。&lt;/p>
&lt;h1 id="pytorch-lightningとは">PyTorch Lightningとは&lt;/h1>
&lt;p>&lt;a href="https://lightning.ai/pytorch-lightning" target="_blank" rel="noopener">PyTorch Lightning&lt;/a>はPyTorchをラップして簡単に使えるようにしてくれるPythonライブラリ。開発は&lt;a href="https://lightning.ai" target="_blank" rel="noopener">Lightning AI&lt;/a>。&lt;/p>
&lt;p>例えばPyTorchの&lt;a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html" target="_blank" rel="noopener">&lt;code>nn.Module&lt;/code>&lt;/a>クラスを継承して実装したネットワークを&lt;a href="https://lightning.ai/docs/pytorch/stable/common/lightning_module.html" target="_blank" rel="noopener">&lt;code>LightningModule&lt;/code>&lt;/a>クラスでくるみ、&lt;code>**.fit(train_x, train_y)&lt;/code>くらいの直感的なメソッドで学習できるようになる。&lt;/p>
&lt;h1 id="hydraとは">Hydraとは&lt;/h1>
&lt;p>&lt;a href="https://hydra.cc/" target="_blank" rel="noopener">Hydra&lt;/a>は機械学習の定型的な処理に特化したスクリプトの記述を助けるPythonライブラリ。開発はMeta (旧 Facebook)。ディレクトリに階層的に保存されたYAML/TOML等のテキストファイルや環境変数、コマンド引数などを参照してすべてのオプションを解決・統合した上で、(この部分はほとんどOmegaConfの機能)、ひとつのPythonオブジェクトとしてエントリポイントの関数(&lt;code>@hydra.main&lt;/code>デコレータをつけて指定)に渡してくれる。また、特定の形式で書かれたPythonオブジェクトを読み込んでクラスのインスタンス化もしてくれる&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>。&lt;/p>
&lt;h1 id="omegaconfとは">OmegaConfとは&lt;/h1>
&lt;p>&lt;a href="https://github.com/omry/omegaconf" target="_blank" rel="noopener">OmegaConf&lt;/a>はプログラムの実行に要するオプションの設定内容をYAML/TOML等のテキストファイルや環境変数などを参照して解決し、ひとつのオブジェクトにまとめてくれるPythonライブラリ。開発はOmry Yadan氏(Hydraの開発者でもある)。&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://hydra.cc/docs/advanced/instantiate_objects/overview/" target="_blank" rel="noopener">Instantiating objects with Hydra&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>